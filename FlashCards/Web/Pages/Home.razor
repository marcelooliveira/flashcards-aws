@page "/"
@using System.Text.RegularExpressions
@using Web.Model

<PageTitle>Flashcards - 23:46</PageTitle>

<h2 class="mdc-typography--headline4 mb">AWS Cloud Practicioner</h2>

<div class="mdc-card summary mb">
    <span class="mdc-typography--subtitle1 questions-right"><b>Acertos:</b> <span>@CorrectCount</span></span>
    <span class="mdc-typography--subtitle1 questions-wrong"><b>Erros:</b> <span>@WrongCount</span></span>
    <span class="mdc-typography--subtitle1 questions-count"><b>Questão:</b> <span>@(CurrentIndex + 1)</span> / @Questions.Count</span>
</div>

@if (Questions.Count == 0)
{
    <p>Carregando questões...</p>
}
else
{
    var question = Questions[CurrentIndex];
    <QuestionCard Question="question"></QuestionCard>
    <div class="navigation-panel">
        <button class="mdc-button mdc-button--outlined" @onclick="PrevQuestion" disabled="@(CurrentIndex==0)">
            <span class="mdc-button__label">Anterior</span>
        </button>
        <button class="mdc-button mdc-button--raised" @onclick="NextQuestion" disabled="@(CurrentIndex==Questions.Count-1)">
            <span class="mdc-button__label">Próxima</span>
        </button>
    </div>
}

@code {
    List<Question> Questions = new();
    int CurrentIndex = 0;
    int CorrectCount => Questions.Count(q => q.WasCorrect == true);
    int WrongCount => Questions.Count(q => q.WasCorrect == false);

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestions();
    }

    async Task LoadQuestions()
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri(NavigationManager.BaseUri) };
            var md = await http.GetStringAsync("Exams/practice-exam-1.md");
            Questions = ParseQuestions(md);
        }
        catch
        {
            Questions = new();
        }
        StateHasChanged();
    }

    List<Question> ParseQuestions(string md)
    {
        var questions = new List<Question>();
        var lines = md.Split('\n');
        Question? current = null;
        for (int i = 0; i < lines.Length; i++)
        {
            var line = lines[i].TrimEnd();
            if (Regex.IsMatch(line, "^\\d+\\. "))
            {
                if (current != null) questions.Add(current);
                current = new Question { Text = line.Substring(line.IndexOf('.')+1).Trim() };
            }
            else if (line.StartsWith("    - "))
            {
                current?.Options.Add(line.Substring(6).Trim());
            }
            else if (line.Contains("Correct answer:"))
            {
                var match = Regex.Match(line, "Correct answer: ([A-Z, ]+)");
                if (match.Success && current != null)
                {
                    var letters = match.Groups[1].Value.Split(',').Select(s => s.Trim());
                    foreach (var l in letters)
                    {
                        if (l.Length == 1 && l[0] >= 'A' && l[0] <= 'Z')
                            current.CorrectOptions.Add(l[0] - 'A');
                    }
                }
            }
        }
        if (current != null) questions.Add(current);
        return questions;
    }

    void NextQuestion()
    {
        if (CurrentIndex < Questions.Count - 1)
            CurrentIndex++;
    }

    void PrevQuestion()
    {
        if (CurrentIndex > 0)
            CurrentIndex--;
    }

    [Inject] NavigationManager NavigationManager { get; set; } = default!;
}
